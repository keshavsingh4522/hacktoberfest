Longest subset zero sum
Send Feedback
Given an array consisting of positive and negative integers, find the length of the longest subarray whose sum is zero.
NOTE: You have to return the length of longest subarray .
Input Format :
Line 1 : Contains an integer N i.e. size of array

Line 2 : Contains N elements of the array, separated by spaces
Output Format
 Line 1 : Length of longest subarray 
Constraints:
0 <= N <= 10^8
Sample Input :
10 
 95 -97 -387 -435 -5 -70 897 127 23 284
Sample Output :
5



				PRACTICE


int lengthOfLongestSubsetWithZeroSum(int* arr, int size){
  
  // Write your code here

}



				SOLUTION

#include<iostream>
#include <unordered_map>
using namespace std;

int lengthOfLongestSubsetWithZeroSum(int* arr, int size){
    unordered_map<int, int> mymap;
    int sum = 0;
    int maxLength = -1;
    for(int i = 0; i < size; i++){
        sum += arr[i];
        int length = 0;

        if(sum == 0){
            length = i+1;
        }else if(mymap.count(sum)){
            length = i - mymap[sum];

        }else{
            mymap[sum] = i;
        }

        if(length > maxLength){
            maxLength = length;
        }
    }
    return maxLength;
}

#include<iostream>
#include "Solution.h"
using namespace std;


int main(){
  int size;
  
  cin >> size;
  int* arr = new int[size];
  for(int i = 0; i < size; i++){
    cin >> arr[i];
  }
  int ans = lengthOfLongestSubsetWithZeroSum(arr,size);
  cout << ans << endl;
  delete arr;
}





