#include <bits/stdc++.h>
using namespace std;

#define PI 3.1415926535897932384626
#define ll long long
#define lli long long int
#define fo(i,a,n) for(int i=a;i<n;i++)
#define pr(i,arr) for(auto i:arr)

typedef vector<int> vi;
typedef vector<ll> vl;
typedef map<ll,ll> ml;
typedef map<int,int> mi;

void file_i_p()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
}

ll fact(ll n) {
    ll res = 1;
    for(ll i=2;i<=n;i++) {
        res*=i;
    }
    return res;
}

ll _lcm(ll x,ll y) {
    return x*y/__gcd(x,y);
}

ll _gcd(ll a,ll b) {
    return a%b==0 ? b : _gcd(b,a%b);
}

class DSU{
    int *parent;
    int *rank;
public:
    DSU(int n)
    {
        parent  = new int[n];
        rank = new int[n];

        for(int i=0;i<n;i++)
        {
            parent[i] = -1;
            rank[i] = 1;
        }
    }

    int find(int i)
    {
        if(parent[i] == -1)
        {
            return i;
        }
        return parent[i] = find(parent[i]);
    }

    void unite(int x,int y)
    {
        int s1 = find(x);
        int s2 = find(y);
        if(s1!=s2)
        {
            if(rank[s1]<rank[s2])
            {
                parent[s1] = s2;
                rank[s2] += rank[s1];
            }
            else
            {
                parent[s2] = s1;
                rank[s1] += rank[s2];
            }
        }
    }
};

class Graph{
    vector<vector<int>> edgelist;
    int V;
    public:
    Graph(int V){
        this->V = V;
    }
    void addEdge(int x,int y,int w){
        edgelist.push_back({w,x,y});
    }
    int kruskals(){
        sort(edgelist.begin(),edgelist.end());
        DSU s(V);
        int ans = 0;
        for(auto edge : edgelist){
            int w = edge[0];
            int x = edge[1];
            int y = edge[2];

            if(s.find(x)!=s.find(y))
            {
                s.unite(x,y);
                ans+=w;
            }
        }

        return ans;

    }

};

void solve()
{
    Graph g(10);
    g.addEdge(1,2,10);
    g.addEdge(1,3,12);
    g.addEdge(2,3,9);
    g.addEdge(2,9,8);
    g.addEdge(3,6,1);
    g.addEdge(3,5,3);
    g.addEdge(5,9,7);
    g.addEdge(5,6,3);
    g.addEdge(9,6,10);
    g.addEdge(6,8,6);
    g.addEdge(9,7,8);
    g.addEdge(9,8,5);
    g.addEdge(7,8,9);
    g.addEdge(7,9,2);
    g.addEdge(8,9,11);
    cout<<g.kruskals()<<endl;
    

}

int main() {
    
    file_i_p();

    solve();

    return 0;
}
