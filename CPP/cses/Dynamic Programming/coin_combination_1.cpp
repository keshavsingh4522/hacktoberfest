#include <bits/stdc++.h>
#include <math.h>
#include <iterator>
#include <map>
#include <stack>
#include <list>
#include <cmath>
#include <queue>
using namespace std;
#define fo(i, n) for (ll i = 0; i < n; ++i)
#define ll long long
#define mod 1000000007
void sor(vector<ll> &x)
{
    sort(x.begin(), x.end());
}

void rev(vector<ll> &x)
{
    reverse(x.begin(), x.end());
}

ll gcd(ll x, ll y)
{
    if (y == 0)
    {
        return x;
    }
    return gcd(y, x % y);
}

ll max(ll x, ll y)
{
    if (x > y)
    {
        return x;
    }
    else
    {
        return y;
    }
}

ll min(ll x, ll y)
{
    if (x > y)
    {
        return y;
    }
    else
    {
        return x;
    }
}

void primeFactors(ll n, vector<ll> &vec)
{

    while (n % 2 == 0)
    {
        vec.push_back(2);
        n = n / 2;
    }

    for (ll i = 3; i <= sqrt(n); i = i + 2)
    {
        while (n % i == 0)
        {
            vec.push_back(i);
            n = n / i;
        }
    }

    if (n > 2)
        vec.push_back(n);
}

ll lcm(ll x, ll y)
{
    return x * y / gcd(x, y);
}

ll g(ll x)
{
    for (ll i = 2; i <= sqrt(x); i++)
    {
        if (x % i == 0)
        {
            return i;
        }
    }
    return 0;
}

ll bina(vector<ll> a, ll n, ll m)
{
    ll start = 0, end = n - 1;
    ll c = 0;
    if (m >= a[n - 1])
    {
        return n;
    }
    while (start <= end)
    {
        ll mid = (start + end) / 2;
        if (m >= a[mid])
        {
            c = mid + 1;
            start = mid + 1;
        }
        else
        {
            end = mid - 1;
        }
    }
    return c;
}
ll binarySearch(vector<ll> arr, ll l, ll r, ll x)
{
    if (r >= l)
    {
        ll mid = l + (r - l) / 2;
        if (arr[mid] == x)
            return mid;
        if (arr[mid] > x)
            return binarySearch(arr, l, mid - 1, x);
        return binarySearch(arr, mid + 1, r, x);
    }

    return -1;
}
int subArraylen(ll arr[], ll n, ll K)
{
    // Stores the frequency of
    // prefix sums in the array
    unordered_map<int, int> mp;

    mp[arr[0]] = 0;

    for (int i = 1; i < n; i++)
    {

        arr[i] = arr[i] + arr[i - 1];
        mp[arr[i]] = i;
    }

    // Initialize len as INT_MAX
    int len = INT_MAX;

    for (int i = 0; i < n; i++)
    {

        // If sum of array till i-th
        // index is less than K
        if (arr[i] < K)

            // No possible subarray
            // exists till i-th index
            continue;

        else
        {

            // Find the exceeded value
            int x = arr[i] - K;

            // If exceeded value is zero
            if (x == 0)
                len = min(len, i);

            if (mp.find(x) == mp.end())
                continue;
            else
            {
                len = min(len, i - mp[x]);
            }
        }
    }

    return len;
}

ll prime(ll n)
{
    for (ll i = 2; i <= sqrt(n); i++)
    {
        if (n % i == 0)
        {
            return i;
        }
    }
    return 0;
}

ll nextPowerOf2(ll n)
{
    ll p = 1;
    if (n && !(n & (n - 1)))
        return n;

    while (p < n)
        p <<= 1;

    return p;
}
ll countBits(ll number)
{
    // log function in base 2
    // take only integer part
    return (ll)log2(number) + 1;
}

ll comb(ll c, ll n)
{
    ll num = 1, d = 1;
    for (ll i = c; i > max(n, c - n); i--)
    {
        num *= i;
    }
    for (ll i = 2; i <= min(n, c - n); i++)
    {
        d *= i;
    }
    return (num / d);
}
ll countDivisors(ll n)
{
    ll cnt = 0;
    for (ll i = 1; i <= sqrt(n); i++)
    {
        if (n % i == 0)
        {
            // If divisors are equal,
            // count only one
            if (n / i == i)
                cnt++;

            else // Otherwise count both
                cnt = cnt + 2;
        }
    }
    return cnt;
}

int getCount(string a, string b)
{

    // If b cannot be generated by repeating a
    if (b.length() % a.length() != 0)
        return -1;

    int count = b.length() / a.length();

    // Repeat a count number of times
    string str = "";
    for (int i = 0; i < count; i++)
    {
        str = str + a;
    }
    if (str == b)
        return count;

    return -1;
}
ll fact(ll n)
{
    ll res = 1;
    for (int i = 2; i <= n; i++)
        res = res * i;
    return res;
}

ll nCr(ll n, ll r)
{
    return fact(n) / (fact(r) * fact(n - r));
}

ll no(ll a, ll b)
{
    if (b == 0)
    {
        return 1;
    }
    ll x = no(a, b / 2);
    if (b % 2)
    {
        return x * x * a;
    }
    else
    {
        return x * x;
    }
}
int countFreq(string &pat, string &txt)
{
    int M = pat.length();
    int N = txt.length();
    int res = 0;

    /* A loop to slide pat[] one by one */
    for (int i = 0; i <= N - M; i++)
    {
        /* For current index i, check for  
           pattern match */
        int j;
        for (j = 0; j < M; j++)
            if (txt[i + j] != pat[j])
                break;

        // if pat[0...M-1] = txt[i, i+1, ...i+M-1]
        if (j == M)
        {
            res++;
            j = 0;
        }
    }
    return res;
}

ll ans[1000001];
ll c[1000001];

ll dp(ll n, ll x, ll sum)
{
    if (sum > x)
    {
        return 0;
    }
    if (sum == x)
    {
        return 1;
    }
    if (ans[sum] == -1)
    {
        ans[sum] = 0;
        ll s = 0;
        fo(i, n)
        {
            s += dp(n, x, sum + c[i]);
        }
        ans[sum] = s;
    }
    return ans[sum] % mod;
}

void solve()
{
    ll n, x;
    cin >> n >> x;
    fo(i, n)
    {
        ll q;
        cin >> q;
        c[i] = q;
    }
    fo(i, x + 1)
    {
        ans[i] = -1;
    }
    cout << dp(n, x, 0) % mod;
}

/*
bool dfs(ll x, ll c)
{
    vis[x] = 1;
    col[x] = c;
    for (ll child : a[x])
    {
        if (vis[child] == 0)
        {
            bool re = dfs(child, c ^ 1);
            if (re == false)
            {
                return false;
            }
        }
        else
        {
            if (col[x] == col[child])
            {
                return false;
            }
        }
    }
    return true;
}
*/
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(0);

    ll t = 1;
    // cin >> t;
    fo(tt, t)
    {
        solve();
    }

    return 0;
}

//0 3 1 0 5 2 6
//0 0 1 2 3 5 6
/*
5

vector<ll> a[n+1];
ll vis[n+1];
void dfs(ll x){
    vis[x]=1;
    for(ll child:a[x]){
        if(vis[child]==0){
            dfs(child);
        }
    }
}

binary for a no just greater than that no:

ll start = 0, end = n - 1;
        ll c = 0;
        while (start <= end)
        {
            ll mid = (start + end) / 2;
            if (m >= a[mid])
            {
                c = mid + 1;
                start = mid + 1;
            }
            else
            {
                end = mid - 1;
            }
        }
        cout << c << endl;
        5-5
        11-11
        8-9 10101
        9-9 
        12-12
        10-11 01101
        10-11 10110
        11-11
        11-11
        12-12
3 5 1 4 2
2 4 1 5 3
2 4 1 5 3
        */
